: sd
#*TAG:39985 20:1973-09-17:0755:../d.proj-sd/sd
# Author: Brian Hiles <bsh@iname.com>
# Date: 1998/11/20
# Description: sed debugger with conditional spypoints
# License: copyright (c) 1996-2002
# Name: sd
# Project: @(#)sd-standalone.sh 3.3 2001-04 bsh@iname.com (Brian Hiles)
# Requires: echon(3S), expr(1), rm(1), sed(1)
# Thanks-to: Walter Briscoe <w.briscoe@ponl.com> for AIX compatibility
# Usage: sd [global-opts] [[-s spypoint-set] [local-opts]]... sedsrc ...
# Version: 3.03

#01 USAGE INFO
usage=\
'usage: sd [global-opts] [-s char local-opts]... [--] script [script-opts]
-?          - print this usage info
-c <pat>    - set pattern or numerical range to conditionally trace (*)
-C|+c <pat> - set pattern or numerical range to conditionally exclude trace (*)
-d <dir>    - get all -s option spypoints from directory <dir>. ["."]
-e <shell>  - shell to execute traced script in. [$SHELL]
-h          - trace the hold buffer. [pattern buffer]
-l          - preceed trace by the input file line number being processed
-o <file>   - file to output trace to ["sd.out"] (*)
-p          - print non-printable characters as octal codes
-q          - emit spypoint code suitable within double-quoted script(s)
              [single-quoted]
-r          - remove extraneous spypoint-labels
-s <char>   - select the spypoint-set to activate in the sed script by the
              filename expansion form [A-Z]* of corresponding filenames ["X"]
-v          - show characters newline and tab visibly as "^M" and "^I"
-x          - copy the internal sed script and transformed -f option script to
              "sd.munge" and "sd.code" respectively. For the curious only :-)
--          - use to separate "sd" args from args to be passed to traced script
(*) These options may be specified multiple times to increase scope of option.
Note: Defaults are in brackets. Default configuration is: -d. -osd.out -sX'

#02
#XXX
echon() # [string]...
# portable echo without terminating newline
{ case ${ECHON:=`echo -n X`} in
-n*) # SysV echo emulation
echo "$@"\\c ;;
X) # BSD echo emulation
echo -n "$@" ;; # Bug: "echo -n -- X" prints "-- X" !
*) # other: try once more
if ECHON=
echon "$@"
then :
else echo 'echon: error: cannot determine echo version' >&2
return 1
fi ;;
esac
return 0
}

#03
test 0$# -eq 0 && echo "$usage" && exit 0
#XXX. ${SIDEROOT:?'set and export variable SIDEROOT'}/lib/echon
# make variables representing tab, newline, and default unique character
eval "`echo 'TAB=\"X\" NL=\"Y\" CTRLA=\"Z\"' | tr XYZ '\011\012\001'`"
# uniqch: set to a non-printing char (or string) not appearing in input text
PATH=/bin${PATH:+:$PATH} RB=} global=g_ lblno=0 \
: ${uniqch:="$CTRLA"} ${TMPDIR:=/tmp}
# Warning: these test commands have been known to fail inexplicably:
#XXX bug: works in sh, but not ksh!
if test -c /dev/stderr -a -w /dev/stderr
then ostream=/dev/stderr # use this stderr (Solaris...)
elif test -c /dev/fd/2 -a -w /dev/fd/2
then ostream=/dev/fd/2 # use this stderr (IRIX, HP/UX, Ultrix...)
else ostream=/dev/tty # echo directly to terminal (SunOS, SVR2/3...)
fi
ostream=/dev/tty #XXX
eval ${DIAG:+'echo >&2 [ sd: terminal output: $ostream ]'}

#04 DEBUGGER POST-AMBLE
trap \
'if test -f $TMPDIR/sd$$.1
then echon "${NL}cleaning up file(s)"
for _inst in $g_oflist $cumflist
do if test -s $_inst
then ex -sc "%s/$uniqch^\([IM]\)$uniqch/^\1/g|\
%s;$uniqch/$;/;|w|q" $_inst
echon "${cdrflag:+,} $_inst"
cdrflag=ON
fi
done
echo .
fi >&2
if test X$g_savefiles = XON
then echon "saving internal file(s)"
mv -f $TMPDIR/sd$$.1 sd.munge 2>/dev/null && echon " sd.munge"
mv -f $TMPDIR/sd$$.2 sd.code 2>/dev/null && echon ", sd.code"
echo .
else set +f
rm -f $TMPDIR/sd$$.[12]
fi >&2
trap 0
exit' 0 1 2 3 15

#05 SED META-CODE
metacode() # spypoint-set-char
{ case $1 in
-) # no-op (use to escape out of global options)
delim= dquote= emitln= filter= flist= \
holdbuf= octalout= ofcmd= oflist= spych= visible= return 0 ;;
[A-Z]) ;;
*) # error: spypoint syntax!
echo "sd: error: invalid spypoint-set \"$1\" -- skipping" >&2
delim= dquote= emitln= filter= flist= \
holdbuf= octalout= ofcmd= oflist= spych= visible= return 1 ;;
esac
regexp=$g_filter$filter endblk=$delim$g_delim ofcmd= spylabels=
regexp="`
echo \"$regexp\" | sed \
-e '/^$/b' \
-e 's/\\\\/_!BS!_/g' \
-e \"s/_!BS!_/&&${g_dquote:+&&}/g\" \
-e 's/@/_!BS!_@/g' \
-e 's/$/{_!BS!_/' \
-e 's/_!BS!_/\\\\/g'
`"
eval ${DIAG:+'echo >&2 [ sd: metacode: regexp: "$regexp" ]'}
#XXX? shouldn't the command below be _before_ regexp construction above?
: ${dquote:=$g_dquote} ${emitln:=$g_emitln} \
${holdbuf:=$g_holdbuf} ${visible:=$g_visible}
if test X$holdbuf = X
then ldelim=[ rdelim=] # to mark patt buffer spypoint
else ldelim=\< rdelim=\> # to mark hold buffer spypoint
fi
test X$g_oflist = X -o X$g_oflist = 'X ' && g_oflist=sd.out
eval ${DIAG:+'echo >&2 [ sd: metacode: global-output-files: $g_oflist ]'}
spylabels=`cd ${g_dir:-.}; echo $1*`
case $spylabels in
?\*) spylabels=$1spy ;;
*) case " $spylabels " in
*" $1spy "*)
;;
*) spylabels="$spylabels $1spy" ;;
esac ;;
esac
eval ${DIAG:+'echo >&2 [ sd: metacode: spypoint-labels: $spylabels ]'}
spychset=$spychset$1
for _inst in $oflist '' $g_oflist # process output file arguments
do test X$_inst = X && cumflist="$cumflist $flist" && continue
if test -w $_inst >$_inst
#XXX bug! newline is always prepended onto $ofcmd ...!
then flist="$flist $_inst" ofcmd="$ofcmd${TAB}w $_inst\\$NL"
else echo "can't open file \"$_inst\" --skipping..." >&2
fi
done
eval ${DIAG:+'echo >&2 [ sd: metacode: output-files: $flist ]'}
echon 'tracing spypoint(s)' >&2
for _inst in $spylabels # foreach spypt, write sed code
do case $_inst in
?spy) ;;
*[!0-9A-Z_a-z]*)
echo " $_inst (ignored: spypoint syntax),"
continue ;;
?????????*)
echo " $_inst (ignored: spypoint is >8 chars),"
continue ;;
*) test ! -f $_inst -o -s $_inst && continue ;;
esac >&2
sep=$TAB #XXX!
#case $_inst in # to line up in same column
#????*) sep=$TAB ;;
#*) sep=$TAB$TAB ;;
#esac
echon " $_inst" >&2
echo \
"/^[$TAB ]*: \\{0,1\\}$_inst.\\{0,2\\}$/ {$NL\
$TAB/\\./ {$NL$TAB$TAB/$_inst\\.[0-9]$/!b skip$1$lblno$NL$TAB}$NL\
$TAB/\\./ !{$NL$TAB$TAB/$_inst$/!b skip$1$lblno$NL$TAB}$NL\
${TAB}s@^.*$_inst\\([.0-9]\\{0,2\\}\\)\$@\\${NL}\
${regexp:-{\\}$NL\
${holdbuf:+${TAB}x\\${NL}}\
${TAB}t _sd$lblno\\1\\$NL${TAB}s/$/$uniqch/\\$NL\
$TAB: _sd$lblno\\1\\${NL}\
${emitln:+$TAB=\\${NL}}\
${visible:+${TAB}s;"${dquote:+'\\\\'}"\\\\n;$uniqch^M$uniqch;g\\$NL}\
${visible:+${TAB}s;$TAB;$uniqch^I$uniqch;g\\${NL}}\
${TAB}s;^;$ldelim$_inst\\1$rdelim$sep/;\\$NL\
${TAB}s;$;/;\\"
lblno=`expr 0$lblno + 1`
if test X$octalout = XON
then # output for files with non-printable characters:
echo "${TAB}l\\"
else # output for files that are text-only:
echo "${TAB}w $ostream\\"
fi
#XXX! holdbuf:+... has "\\" entrained because $endblk has its own escnl
#XXX old: ${TAB}s;^[^/]*/\\\\(.*\\\\)/$;\\\\1;\\$NL\
#XXX why does the below have to be "echon" to
#XXX not make non-terminating empty line?!
echon \
"$ofcmd\
${visible:+${TAB}s;$uniqch^I$uniqch;$TAB;g\\$NL}\
${visible:+${TAB}s;$uniqch^M$uniqch;"${dquote:+'\\\'}"\\\\\\$NL;g\\$NL}\
${TAB}s;^[^/]*/\\\\(.*\\\\)/$;\\\\1;\\$NL\
$TAB/$uniqch$/{\\$NL$TAB${TAB}s///\\$NL$TAB${TAB}t _sd$lblno\\1\\$NL\
$TAB$TAB: _sd$lblno\\1\\$NL$TAB}\
${holdbuf:+\\$NL${TAB}x}\
${endblk:-\\$NL$RB\\$NL}"
lblno=`expr 0$lblno - 1`
echo "@$NL${TAB}p; b$NL$TAB: skip$1$lblno$NL}$NL"
lblno=`expr 0$lblno + 2`
done >&3
echo ", to file(s)$flist;" >&2
# spych is set to null to flag redundant call on last spypoint-set...
delim= dquote= emitln= filter= flist= \
holdbuf= octalout= ofcmd= oflist= spych= visible=
}

#06
# To suppress initializing from .sdrc, set SDRC=' '.
# Example: $ SDRC=' ' export SDRC
# sample .sdrc: -ev 'sed -f'
eval set -- `
if test -n "$SDRC"
then echo "$SDRC"
elif test -r .sdrc
then echo "\`cat .sdrc\`"
elif test -r $HOME/.sdrc
then echo "\`cat $HOME/.sdrc\`"
fi
for _inst
do echo "'$_inst'"
done
`

#07 SED PREAMBLE
#XXX old: : gettext${NL}s/\\\\\\\\/_!ESCBS!_/g${NL}s/\\\\#/_!ESCOCT!_/g${NL}\
#XXX old: /^[$TAB ]*#CBEGIN$/,/^[$TAB ]*#CEND$/d$NL\
exec 3>$TMPDIR/sd$$.1
echo >&3 \
"#n sd.munge: convert selected sed labels into sed code to print trace$NL\
: gettext${NL}s/\\\\\\\\/_!ESCBS!_/g${NL}s/\\\\#/_!ESCOCT!_/g${NL}\
s/\\([^$TAB ;&|()<>]\\)#/\\1_!OCT!_/g$NL/\\\\$/ {$NL$TAB/#/ !{$NL\
$TAB$TAB\$!N$NL$TAB$TAB\$!b gettext$NL$TAB}$NL}$NL\
/^[$TAB ]*#CBEGIN$/,/^[$TAB ]*#CEND$/ s/.*//$NL\
/^[$TAB ]\\{1,\\}#/ {$NL$TAB/#n/!d$NL}$NL/^#[^!n]/d$NL/^#$/d${NL}\
s/_!OCT!_/#/g${NL}s/_!ESCOCT!_/\\\\#/g${NL}\
s/_!ESCBS!_/\\\\\\\\/g$NL"

#08
OPTARG= OPTIND=1
eval ${DIAG:+'echo >&2 [ sd: command-line-parameters: $* ]'}
while getopts :\?C:c:d:e:HhLlo:PpQqRrs:VvXx opt
do case $opt in
c) eval eval \
${global}filter="\"'\$${global}filter''\$OPTARG$NL\\
'\"" ${global}delim="\"'\$${global}delim\\\\$NL}'\"" ;;
C) eval eval \
${global}filter="\"'\$${global}filter''\$OPTARG!$NL\\
'\"" ${global}delim="\"'\$${global}delim\\\\$NL}'\"" ;;
d) g_dir=$OPTARG ;;
e) g_shell=$OPTARG ;;
h) eval ${global}holdbuf=ON ;;
+h|H) eval ${global}holdbuf= ;;
l) eval ${global}emitln=ON ;; # only echoes to stdout!
+l|L) eval ${global}emitln= ;;
o) eval ${global}oflist="\"$OPTARG \$${global}oflist\"" ;;
p) eval ${global}octalout=ON ;;
+p|P) eval ${global}octalout= ;;
q) eval ${global}dquote=ON ;; # invoke before -c/-C!
+q|Q) eval ${global}dquote= ;; # invoke before -c/-C!
r) g_rmlabels=ON ;;
+r|R) g_rmlabels= ;;
s) if test X$global = Xg_
then global= spych=$OPTARG
else metacode $spych
spych=$OPTARG
fi ;;
v) eval ${global}visible=ON ;;
+v|V) eval ${global}visible= ;;
x) g_savefiles=ON ;;
+x|X) g_savefiles= ;;
[:?]) echo "error: no such option \"$OPTARG\"" >&2
echo "$usage" >&2
trap '' 0
exit 2 ;;
esac
done
set X "$@"; shift $OPTIND # do: shift `expr 0$OPTIND - 1`
g_prog=${1:?'missing sed script argument'} shift
metacode $spych
case $spychset in *X*) ;; *) metacode X ;; esac # default spypoint-set "X"

#09 SED POST-AMBLE
if test X$g_rmlabels = XON
then # insert sed code that eliminates inactive spypoint-labels
echo "/^[$TAB ]*: \\{0,1\\}[$spychset][0-9A-Z_a-z]*[.0-9]\\{0,2\\}$/d"
else echo p
fi >&3
exec 3>&-

#10 DEBUGGER PREAMBLE
if test X$g_prog = X-
then g_prog=
echo 'executing script <stdin>...'
else #XXX reimplement with "predictshell" ??
if test -z "$g_shell"
then g_shell=`sed 1q $g_prog`
g_shell="`
case $g_shell in
\#!*) echo $g_shell ;;
*) echo $SHELL ;;
esac | sed 's/^#![$TAB ]*//'
`"
fi
echo "executing script \"$g_shell $g_prog${*:+ $*}\"..."
fi >&2
sed -f $TMPDIR/sd$$.1 $g_prog >$TMPDIR/sd$$.2
trailws=`sed -n "/[$TAB ]$/=" $g_prog`
test -n "$trailws" &&
echo 'sd: warning: trailing whitespace on line(s)' $trailws >&2
${g_shell:-${SHELL:-sh}} $TMPDIR/sd$$.2 ${1+"$@"}
# uncomment following "exit" to exit with return code of shprog, not debugger
exit
exit 0
